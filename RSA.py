# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'rsa.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import random

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import math, string, sys

def isprime(n):
    for i in range(2, n):
        if i*i >= n:
            break
        if n % i == 0:
            return False
    return True

def RandomPrimeNumber():
    while True:
        prime = random.randrange(pow(10, 12), pow(10, 13) - 1)
        if isprime(prime):
            return prime
def getphi(p,q):
    phi = (p-1)*(q-1)
    return phi

def ValueN(p,q, phi):
    b = 0
    n = p*q
    while b != 1:
        e = random.randrange(1, phi)
        b = math.gcd(phi, e)

    return n, e

def inputN(e):
    b = 0
    while b != 1:
        phi = random.randrange(1,e)
        b = math.gcd(e, phi)

    return phi

def PowerModInvers(phi, e):
    d = pow(e, -1, phi)
    return d

def PowerMod(block, e, n):
    text = pow(block, e, n)
    return text

def Split5Encrypt(text):
    splitText = [text[i:i+5] for i in range(0, len(text), 5)]
    return splitText

def ConvertToOrd(text):
    asciinumber = []
    for i in text:
        asciinumber.append(ord(i))
    return asciinumber

def ConvertToBinary(text):
    binValue = 0
    binResult = []
    for i in range(len(text)):
        binValue = bin(text[i])[2:]
        binValue = binValue.zfill(12)
        binResult.append(binValue)
    return binResult

def Connect(text):
    ConnectedText = ''.join(text)
    return ConnectedText

def ConvertToDec(text):
    decimal = []
    for i in range(len(text)):
        decimal.append(int(text[i],2))

    return decimal

def ConBackToDecryption(text):
    Bin = bin(text)[2:]
    Bin = Bin.zfill(60)

    return Bin

def split12Decrypt(text):
    splitText = [text[i:i+12] for i in range(0, len(text), 12)]
    return splitText

def convertToChar(text):
    asciichar = []
    for i in text:
        if i != 0:
            asciichar.append(chr(i))
    return asciichar


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800, 707)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 791, 681))
        self.tabWidget.setObjectName("tabWidget")
        self.Sifrovani = QtWidgets.QWidget()
        self.Sifrovani.setObjectName("Sifrovani")
        self.Popis001 = QtWidgets.QLabel(self.Sifrovani)
        self.Popis001.setGeometry(QtCore.QRect(10, 10, 251, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis001.setFont(font)
        self.Popis001.setObjectName("Popis001")
        self.OTsif = QtWidgets.QPlainTextEdit(self.Sifrovani)
        self.OTsif.setGeometry(QtCore.QRect(10, 30, 761, 191))
        self.OTsif.setObjectName("OTsif")
        self.Zasifruj = QtWidgets.QPushButton(self.Sifrovani)
        self.Zasifruj.setGeometry(QtCore.QRect(680, 290, 93, 28))
        self.Zasifruj.setObjectName("Zasifruj")
        self.scrollArea = QtWidgets.QScrollArea(self.Sifrovani)
        self.scrollArea.setGeometry(QtCore.QRect(10, 330, 761, 311))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 759, 309))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Sif_Vys = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Sif_Vys.sizePolicy().hasHeightForWidth())
        self.Sif_Vys.setSizePolicy(sizePolicy)
        self.Sif_Vys.setText("")
        self.Sif_Vys.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Sif_Vys.setObjectName("Sif_Vys")
        self.verticalLayout.addWidget(self.Sif_Vys)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.N_Sif = QtWidgets.QLineEdit(self.Sifrovani)
        self.N_Sif.setGeometry(QtCore.QRect(10, 230, 761, 22))
        self.N_Sif.setObjectName("N_Sif")
        self.E = QtWidgets.QLineEdit(self.Sifrovani)
        self.E.setGeometry(QtCore.QRect(10, 260, 761, 22))
        self.E.setObjectName("E")
        self.GenerujNahodne = QtWidgets.QCheckBox(self.Sifrovani)
        self.GenerujNahodne.setGeometry(QtCore.QRect(370, 290, 301, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.GenerujNahodne.setFont(font)
        self.GenerujNahodne.setObjectName("GenerujNahodne")
        self.tabWidget.addTab(self.Sifrovani, "")
        self.Desifrovani = QtWidgets.QWidget()
        self.Desifrovani.setObjectName("Desifrovani")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.Desifrovani)
        self.scrollArea_2.setGeometry(QtCore.QRect(10, 340, 761, 301))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 759, 299))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.vys_desifText = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.vys_desifText.sizePolicy().hasHeightForWidth())
        self.vys_desifText.setSizePolicy(sizePolicy)
        self.vys_desifText.setText("")
        self.vys_desifText.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.vys_desifText.setObjectName("vys_desifText")
        self.verticalLayout_2.addWidget(self.vys_desifText)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.N_DES = QtWidgets.QLineEdit(self.Desifrovani)
        self.N_DES.setGeometry(QtCore.QRect(10, 240, 761, 22))
        self.N_DES.setObjectName("N_DES")
        self.OTDes = QtWidgets.QPlainTextEdit(self.Desifrovani)
        self.OTDes.setGeometry(QtCore.QRect(10, 30, 761, 191))
        self.OTDes.setObjectName("OTDes")
        self.Desif = QtWidgets.QPushButton(self.Desifrovani)
        self.Desif.setGeometry(QtCore.QRect(680, 300, 93, 28))
        self.Desif.setObjectName("Desif")
        self.popis01 = QtWidgets.QLabel(self.Desifrovani)
        self.popis01.setGeometry(QtCore.QRect(10, 10, 251, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.popis01.setFont(font)
        self.popis01.setObjectName("popis01")
        self.D = QtWidgets.QLineEdit(self.Desifrovani)
        self.D.setGeometry(QtCore.QRect(10, 270, 761, 22))
        self.D.setObjectName("D")
        self.tabWidget.addTab(self.Desifrovani, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.OTsif.setTabChangesFocus(True)
        self.OTDes.setTabChangesFocus(True)
        self.GenerujNahodne.setChecked(True)
        self.Sif_Vys.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.vys_desifText.setTextInteractionFlags(Qt.TextSelectableByMouse)

        self.Sif_Vys.setWordWrap(True)
        self.vys_desifText.setWordWrap(True)
        self.Zasifruj.clicked.connect(self.clicked_sif)
        self.Desif.clicked.connect(self.clicked_def)

    def clicked_sif(self):
        self.Sif_Vys.setText("")
        OT = self.OTsif.toPlainText()
        p = 0
        q = 0
        if len(OT) == 0:
            self.show_popUpEmpty()
            return 0

        if self.GenerujNahodne.isChecked():
            while (p == q):
                p = RandomPrimeNumber()
                q = RandomPrimeNumber()
            phi = getphi(p, q)
            value_N, value_E = ValueN(p, q, phi)

        else:
            value_N = self.N_Sif.text()
            value_E = self.E.text()
            if len(value_E) == 0 or len(value_N) == 0:
                self.show_popUpEmpty()
                return 0
            try:
                int(value_E)
                int(value_N)
            except ValueError:
                self.show_PopUp_NotDigitSif()
                return 0
            else:
                value_E = int(value_E)
                value_N = int(value_N)
                phi = inputN(value_E)

        d = PowerModInvers(phi, value_E)

        self.Sif_Vys.setText(
            "Verejny klic je: \n   Hodnota N:" + str(value_N) + "\n    Hodnota E:" + str(value_E) + "\n")
        self.Sif_Vys.setText(
            self.Sif_Vys.text() + "Privatni klic je: \n    Hodnota N:" + str(value_N) + "\n    Hodnota D: " + str(
                d) + "\n")

        splitedText = Split5Encrypt(OT)
        ordNumber = []
        binary = []
        finalUpravText = []
        encryptOT = []
        for i in range(len(splitedText)):
            ordNumber.append(ConvertToOrd(splitedText[i]))

        for i in range(len(ordNumber)):
            binary.append(ConvertToBinary(ordNumber[i]))

        for i in range(len(binary)):
            finalUpravText.append(Connect(binary[i]))

        finalUpravText = ConvertToDec(finalUpravText)

        for i in range(len(finalUpravText)):
            encryptOT.append(PowerMod(finalUpravText[i], value_E, value_N))

        self.Sif_Vys.setText(self.Sif_Vys.text() + "Zasifrovany text je: \n")
        for i in encryptOT:
            self.Sif_Vys.setText(self.Sif_Vys.text() + str(i) + " ")

    def clicked_def(self):
        self.vys_desifText.setText("")
        ST = self.OTDes.toPlainText()
        value_N = self.N_DES.text()
        value_D = self.D.text()
        split_ST = ST.split()

        decryptToChar = []
        connectDec = []
        DecryptTEXT = []
        binaryST = []
        decimalST = []
        powerText = []
        splitBinaryText = []

        if len(ST) == 0 or len(value_N) == 0 or len(value_D) == 0:
            self.show_popUpEmpty()
            return 0

        self.vys_desifText.setText(self.vys_desifText.text() + "Hodnota N: " + value_N + "\nHodnota D: " + value_D)
        try:
            int(value_D)
            int(value_N)
        except ValueError:
            self.show_PopUp_NotDigit()
            return 0
        else:
            value_D = int(value_D)
            value_N = int(value_N)

        for i in range(len(split_ST)):
            if split_ST[i].isdigit() == True:
                powerText.append(PowerMod(int(split_ST[i]), value_D, value_N))
            else:
                self.show_PopUp_NotDigit()
                return 0

        for i in range(len(powerText)):
            binaryST.append(ConBackToDecryption(powerText[i]))

        for i in range(len(binaryST)):
            splitBinaryText.append(split12Decrypt(binaryST[i]))

        for i in range(len(splitBinaryText)):
            decimalST.append(ConvertToDec(splitBinaryText[i]))

        for i in range(len(decimalST)):
            decryptToChar.append(convertToChar(decimalST[i]))

        for i in range(len(decryptToChar)):
            connectDec.append(Connect(decryptToChar[i]))

        DecryptTEXT.append(Connect(connectDec))

        self.vys_desifText.setText(self.vys_desifText.text() + "\nVysledny desifrovany text je:\n")

        for i in range(len(DecryptTEXT)):
            self.vys_desifText.setText(self.vys_desifText.text() + DecryptTEXT[i])

    def show_popUpEmpty(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Textove pole nesmi byt prazdne!")
        msgbox.setText("Zadany text nesmi byt prazdny")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_PopUp_NotDisjoned(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Hodnota E neni nesoudelna s hodntou phi n")
        msgbox.setText("Zadana hodnota E neni nesoudelna s hodnotou phi n")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_PopUp_LENGTHERROR(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Hodnota N mimo rozsah")
        msgbox.setText("Zadana hodnota N je mensi nez 1*10^12, coz je nejmensi mozny pocet cislic, ktere lze dosadit.")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_PopUp_NotDigit(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Zadany text obsahuje znak, ktery neni cislo")
        msgbox.setText("Zadany text obsahuje znak/znaky, ktere nejsou cislo.")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_PopUp_NotDigitSif(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Hodnoty N a E nemaji spravny format")
        msgbox.setText(
            "Hodnoty N a E nejsou cisla. Zadejte cislene hodnoty a nebo zaskrtnete moznost nahodneho generovani")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Popis001.setText(_translate("MainWindow", "Text k šifrování:"))
        self.OTsif.setPlaceholderText(_translate("MainWindow", "Zadejte text k zasifrovani"))
        self.Zasifruj.setText(_translate("MainWindow", "Zasifruj"))
        self.N_Sif.setPlaceholderText(_translate("MainWindow", "Hodnota N"))
        self.E.setPlaceholderText(_translate("MainWindow", "Hodnota E"))
        self.GenerujNahodne.setText(_translate("MainWindow", "Vygenerovat nahodne hodnoty pro N a E"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Sifrovani), _translate("MainWindow", "Sifrovat"))
        self.N_DES.setPlaceholderText(_translate("MainWindow", "Hodnota N"))
        self.OTDes.setPlaceholderText(_translate("MainWindow", "Zadejte text k desifrovani"))
        self.Desif.setText(_translate("MainWindow", "Desifruj"))
        self.popis01.setText(_translate("MainWindow", "Text k desifrovani:"))
        self.D.setPlaceholderText(_translate("MainWindow", "Hodnota D"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Desifrovani), _translate("MainWindow", "Desifrovat"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWin = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWin)
    MainWin.show()
    sys.exit(app.exec_())
